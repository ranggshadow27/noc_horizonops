<?php

namespace App\Filament\Resources;

use App\Filament\Resources\HaloBaktiTicketResource\Pages;
use App\Models\AreaList;
use App\Models\HaloBaktiTicket;
use App\Models\SiteDetail;
use Filament\Tables\Actions\ActionGroup;
use Filament\Forms\Components\Actions;
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\View;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\CreateAction;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Livewire\Features\SupportFileUploads\TemporaryUploadedFile;

class HaloBaktiTicketResource extends Resource
{
    protected static ?string $model = HaloBaktiTicket::class;

    protected static ?string $navigationIcon = 'heroicon-o-ticket';

    protected static ?string $navigationLabel = 'HaloBakti Ticket';
    protected static ?string $navigationGroup = 'Trouble Tickets';

    protected static ?string $pluralModelLabel = 'HaloBakti Ticket';
    protected static ?string $modelLabel = 'HaloBakti Ticket';

    // protected static ?string $recordTitleAttribute = 'hb_tt_number';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make('')
                    ->heading('')
                    ->schema([
                        Select::make('site_id')
                            ->label('Site ID')
                            ->options(function () {
                                return SiteDetail::pluck('site_name', 'site_id')->mapWithKeys(function ($siteName, $site_id) {
                                    return [$site_id => "$site_id - $siteName"];
                                })->toArray();
                            })
                            ->getSearchResultsUsing(function (string $search): array {
                                $sites = SiteDetail::where('site_id', 'like', "%{$search}%")
                                    ->orWhere('site_name', 'like', "%{$search}%")
                                    ->limit(10)
                                    ->get();
                                return $sites->mapWithKeys(function ($site) {
                                    return [$site->site_id => "{$site->site_id} - {$site->site_name}"];
                                })->toArray();
                            })
                            ->getOptionLabelFromRecordUsing(function (SiteDetail $record): string {
                                return "{$record->site_id} - {$record->site_name}";
                            })
                            ->preload()
                            ->searchable()
                            ->native(false)
                            ->required()
                            ->reactive()
                            ->columnSpanFull()
                            ->placeholder("Select a site ID or site name"),

                        Textarea::make('description')
                            ->required()
                            ->live(onBlur: true)
                            ->columnSpanFull()
                            ->autosize()
                            ->extraAlpineAttributes(['x-model' => 'description', 'x-on:input' => 'updateFields()'])
                            ->afterStateUpdated(function ($state, callable $set) {
                                preg_match('/Nama\s*:\s*([^\n]+)/i', $state, $nameMatch);
                                preg_match('/Telepon\s*:\s*(\d+)/i', $state, $numberMatch);
                                preg_match('/Ticket\s*:\s*([^\n]+)/i', $state, $ttMatch);
                                $set('pic_name', $nameMatch[1] ?? null);
                                $set('pic_number', $numberMatch[1] ?? null);
                                $set('hb_tt_number', $ttMatch[1] ?? null);
                            }),
                        TextInput::make('pic_name')
                            ->label("PIC Name")
                            ->placeholder("This form is autogenerated")
                            // ->readOnly()
                            ->reactive(),
                        TextInput::make('pic_number')
                            ->label("PIC Number")
                            ->placeholder("Please fill description form")
                            // ->readOnly()
                            ->reactive(),
                        TextInput::make('hb_tt_number')
                            ->label("HaloBakti TT Number")
                            ->placeholder("This form is autogenerated")
                            // ->readOnly()
                            ->reactive(),
                    ]),

                Section::make('')
                    ->heading(fn($operation) => $operation === 'edit' ? '' : 'Ticket Progress')
                    ->visible(fn($operation) => $operation === 'edit' || 'view')
                    ->schema([
                        RichEditor::make('new_comment')
                            ->label('Ticket Progress')
                            ->placeholder('Update ticket progress here..')
                            ->toolbarButtons([
                                'bold',
                                'italic',
                                'redo',
                                'strike',
                                'underline',
                                'undo',
                            ])
                            ->reactive()
                            ->visible(fn($operation) => $operation === 'edit'),
                        // FileUpload::make('new_images')
                        //     ->label('Attached Images')
                        //     ->multiple()
                        //     ->disabled() // Disable direct upload, hanya display
                        //     ->openable()
                        //     ->downloadable(),
                        Actions::make([
                            Action::make('save_comment')
                                // ->visible(fn($get, $operation) => $get('new_comment'))
                                ->label('Update Progress')
                                ->action(function ($state, $record, callable $set, $operation, $livewire, $form) {
                                    if ($state['new_comment']) {
                                        $images = $state['new_images'] ?? [];
                                        if ($operation === 'create') {
                                            $form->getLivewire()->data['comments'] = array_merge(
                                                $form->getLivewire()->data['comments'] ?? [],
                                                [[
                                                    'comment' => $state['new_comment'],
                                                    'time' => now()->toDateTimeString(),
                                                    'user_id' => Auth::id() ?? 'System',
                                                    'images' => $images,
                                                ]]
                                            );
                                        } else {
                                            $record->addComment($state['new_comment'], $images);
                                        }
                                        $set('new_comment', '');
                                        $set('new_images', []);
                                        $livewire->uploadedImageCount = 0; // Reset counter
                                    }
                                }),
                            Action::make('upload_image')
                                ->icon('phosphor-upload-simple-duotone')
                                ->color('gray')
                                ->label(fn($get) => !empty($get('new_images')) ? 'Uploaded ' . count($get('new_images')) . ' image(s) âœ…' : 'Upload Image')
                                ->disabled(fn($get) => !empty($get('new_images')))
                                ->form([
                                    FileUpload::make('images')
                                        ->label('Images')
                                        ->multiple()
                                        ->panelLayout('grid')
                                        ->disk('public')
                                        ->directory(fn($record) => $record ? "tickets/{$record->ticket_id}/images" : "tickets/MHG-HB-" . now()->format('Ymd') . '-' . str_pad(HaloBaktiTicket::whereDate('created_at', now()->toDateString())->count() + 1, 3, '0', STR_PAD_LEFT) . '/images')
                                        ->preserveFilenames()
                                        ->acceptedFileTypes(['image/jpeg', 'image/png', 'image/gif'])
                                        ->maxFiles(5)
                                        ->maxSize(5120)
                                        // ->getUploadedFileNameForStorageUsing(function (TemporaryUploadedFile $file): string {
                                        //     return (string) str("_comment.{$file->extension()}")->prepend(now()->timestamp);
                                        // })
                                        ->openable()
                                        ->downloadable(),
                                ])
                                ->action(function (array $data, $record, callable $set, callable $get, $form) {
                                    $images = [];
                                    if ($data['images'] ?? []) {
                                        foreach ($data['images'] as $file) {
                                            $images[] = Storage::url($file); // URL final
                                        }
                                        $currentImages = $get('new_images') ?? [];
                                        $set('new_images', array_merge($currentImages, $images));
                                        $form->getLivewire()->uploadedImageCount = count($images);
                                        Log::info('Uploaded files: ' . json_encode($data['images']));
                                        Log::info('New images state: ' . json_encode($get('new_images')));
                                    }
                                })
                                ->modalHeading('Upload Images')
                                ->modalSubmitActionLabel('Save')
                                ->modalWidth('lg'),
                        ])
                            ->visible(fn($operation) => $operation === 'edit'),
                        View::make('filament.pages.ticket-comments')
                            ->viewData(['record' => $form->getRecord()])
                            ->visible(fn($get) => $form->getRecord() !== null),
                    ]),
                Section::make('')
                    ->schema([
                        Select::make('status')
                            ->native(false)
                            ->default('On Progress')
                            ->columnSpanFull()
                            ->options([
                                'On Progress' => 'On Progress',
                                'Closed' => 'Closed',
                                'Unresolved' => 'Unresolved',
                            ]),
                    ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->defaultSort('created_at', 'desc')
            // ->recordTitleAttribute('ticket_id')
            ->columns([
                TextColumn::make('hb_tt_number')
                    ->label("Ticket ID/Number")
                    ->description(fn($record): string => $record->ticket_id, 'above')
                    ->searchable(),

                TextColumn::make('site_id')
                    ->hidden()
                    ->searchable(),

                TextColumn::make('site.site_name')
                    ->label('Site Name')
                    ->description(fn($record): string => $record->site_id, 'above')
                    ->searchable(),

                TextColumn::make('site.province')
                    ->label("Province")
                    ->tooltip(function (TextColumn $column): ?string {
                        $state = $column->getState();

                        if (strlen($state) <= $column->getCharacterLimit()) {
                            return null;
                        }

                        return $state;
                    })
                    ->description(fn($record): string => $record->site->area->area)
                    ->searchable(),

                TextColumn::make('description')
                    ->limit(80),

                TextColumn::make('pic_number')
                    ->label("PIC Data")
                    ->description(fn($record): string => $record->pic_name ?? "Unknown", 'above')
                    ->copyable(),

                TextColumn::make('status')
                    ->badge()
                    ->icon(function ($state) {
                        if (str_contains($state, "On Progress")) {
                            return "phosphor-spinner-gap-duotone";
                        } elseif (str_contains($state, "Closed")) {
                            return 'phosphor-check-circle-duotone';
                        } elseif (str_contains($state, "Unresolved")) {
                            return 'phosphor-exclamation-mark-duotone';
                        } else {
                            return 'gray';
                        }
                    })
                    ->color(function ($state) {
                        if (str_contains($state, "On Progress")) {
                            return "warning";
                        } elseif (str_contains($state, "Closed")) {
                            return 'success';
                        } elseif (str_contains($state, "Unresolved")) {
                            return 'danger';
                        } else {
                            return 'gray';
                        }
                    }),

                TextColumn::make('created_at')
                    ->dateTime(),
            ])
            ->filters([
                SelectFilter::make('area')
                    ->label("Area")
                    ->options(fn() => AreaList::all()->pluck('area', 'area'))
                    ->native(false)
                    ->modifyQueryUsing(function (Builder $query, $state) {
                        if (! $state['value']) {
                            return $query;
                        }
                        return $query->whereHas('site', fn($query) => $query->whereHas('area', fn($query) => $query->where('area', $state['value'])));
                    }),
            ])
            ->actions([
                ActionGroup::make([
                    ViewAction::make()
                        ->label("View Ticket")
                        ->icon("phosphor-eye-duotone")
                        ->modal()
                        ->visible(
                            fn($record) =>
                            $record->status === 'Closed' && auth()->user()->roles->pluck('id')->some(fn($id) => $id < 4)
                        ),
                    EditAction::make()
                        ->label("Update")
                        ->icon("phosphor-pencil-simple-line-duotone")
                        ->modal()
                        ->visible(
                            fn($record) =>
                            $record->status !== 'Closed' && auth()->user()->roles->pluck('id')->some(fn($id) => $id < 4)
                        ),
                    DeleteAction::make()
                        ->label("Delete")
                        ->icon("phosphor-trash-duotone")
                        ->visible(
                            fn($record) =>
                            $record->status !== 'Closed' && auth()->user()->roles->pluck('id')->some(fn($id) => $id < 4)
                        ),
                ])
            ])
            ->headerActions([
                CreateAction::make()
                    ->label("Add New Ticket")
                    ->icon('phosphor-plus-circle-duotone')
                    ->visible(fn() => auth()->user()->roles->pluck('id')->some(fn($id) => $id < 4) ? true : false),
            ])
            ->bulkActions([
                BulkActionGroup::make([
                    DeleteBulkAction::make(),
                ]),
            ])
            ->heading('Halo Bakti RTGS BAKTI Ticket')
            ->description('Mahaga Halo Bakti Trouble Ticket - Network Operation Center.')
            ->defaultPaginationPageOption(10)
            ->paginationPageOptions([5, 10, 20, 100])
            ->emptyStateHeading('No Assigned Ticket yet')
            ->emptyStateDescription('Once you have been assign your first Ticket, it will appear here.')
            ->emptyStateIcon('phosphor-hand-withdraw-duotone');
    }

    public static function getRelations(): array
    {
        return [];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListHaloBaktiTickets::route('/'),
            // 'create' => Pages\CreateHaloBaktiTicket::route('/create'),
            // 'edit' => Pages\EditHaloBaktiTicket::route('/{record}/edit'),
        ];
    }
}
